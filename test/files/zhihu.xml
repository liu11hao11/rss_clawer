<rss version="2.0">
<channel>
<title>CNode：Node.js专业中文社区</title>
<link>http://cnodejs.org</link>
<language>zh-cn</language>
<description>CNode：Node.js专业中文社区</description>
<item>
<title>之前好好的，后来进入登陆页面就报错</title>
<link>http://cnodejs.org/topic/5ae2b6d5adea947348e75e88</link>
<guid>http://cnodejs.org/topic/5ae2b6d5adea947348e75e88</guid>
<description>&lt;div class="markdown-text">&lt;p>&lt;img src="//dn-cnode.qbox.me/FuBv_dKhsbg7ZYliuS6THNMMqqHy" alt="C197E0AE-7EC8-44A7-B5E6-4D282F0CFE58.png">有没有大神给看看&lt;/p>&lt;/div></description>
<author>xuyonghao</author>
<pubDate>Fri, 27 Apr 2018 05:36:21 GMT</pubDate>
</item>
<item>
<title>探秘 Node.js 10 新功能的背后：V8 release 6.6</title>
<link>http://cnodejs.org/topic/5ae2b36e02591040485ba8a0</link>
<guid>http://cnodejs.org/topic/5ae2b36e02591040485ba8a0</guid>
<description>&lt;div class="markdown-text">&lt;p>原文：&lt;a href="https://v8project.blogspot.com/2018/03/v8-release-66.html">https://v8project.blogspot.com/2018/03/v8-release-66.html&lt;/a>&lt;/p>&lt;hr>&lt;p>每六周，我们都会创建一个 V8 的新分支，作为我们&lt;a href="https://zhuanlan.zhihu.com/p/35038142">发布流程&lt;/a>的一部分。每个版本都是在 Chrome Beta 里程碑之前从 V8 的 Git master 分支出来的。今天(2018-03-27)，我们很高兴地宣布，我们发布了一个新的分支：&lt;a href="https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/6.6">V8 version 6.6&lt;/a>，在几个星期内，我们会发布 Chrome 66 Stable 版，在此之前它依然处于测试阶段。V8 v6.6 提供了面向开发人员的一些很酷的特性。本文提供了预期发布的一些亮点预览。&lt;/p>&lt;h2>JavaScript 语言新特性&lt;/h2>&lt;p>&lt;a href="https://esnext.devtips.cn/t/function-prototype-tostring/35">Function.prototype.toString()&lt;/a> 现在返回源代码的所有内容，包括空格和注释。以下是一个旧行为和新行为的对比例子：&lt;/p>&lt;pre class="prettyprint language-js">&lt;code>&amp;#x2F;&amp;#x2F; 注意 &amp;#96;function&amp;#96; 关键词之前的注释以及空格function &amp;#x2F;* a comment *&amp;#x2F; foo () {}&amp;#x2F;&amp;#x2F; 之前版本:foo.toString();&amp;#x2F;&amp;#x2F; → &amp;#x27;function foo() {}&amp;#x27;&amp;#x2F;&amp;#x2F;             ^ no comment&amp;#x2F;&amp;#x2F;                ^ no space&amp;#x2F;&amp;#x2F; 新版本:foo.toString();&amp;#x2F;&amp;#x2F; → &amp;#x27;function &amp;#x2F;* comment *&amp;#x2F; foo () {}&amp;#x27;&lt;/code>&lt;/pre>&lt;p>行分隔符(U+2028)和段落分隔符(U+2029)现在允许出现在字符串文字中，&lt;a href="https://github.com/tc39/proposal-json-superset">matching JSON&lt;/a>。以前，这些符号被视为字符串中的行结束符，因此使用它们会导致 &lt;code>SyntaxError&lt;/code> 异常。&lt;/p>&lt;p>在异常捕获的 &lt;code>catch&lt;/code> 子句中可以不加参数: &lt;a href="https://zhuanlan.zhihu.com/p/33314746">catch 的参数可以省略了 optional-catch-binding&lt;/a>。如果您不需要在异常代码中处理 exception 对象，这非常有用。&lt;/p>&lt;pre class="prettyprint language-js">&lt;code>try {  doSomethingThatMightThrow();} catch { &amp;#x2F;&amp;#x2F; → Look mom, no binding!  handleException();}&lt;/code>&lt;/pre>&lt;p>除了 &lt;code>String.prototype.trim()&lt;/code> 外，V8 现在实现了 &lt;a href="https://esnext.devtips.cn/t/string-prototype-trimstart-string-prototype-trimend/37">String.prototype.trimStart()&lt;/a> 和 &lt;a href="https://esnext.devtips.cn/t/string-prototype-trimstart-string-prototype-trimend/37">String.prototype.trimEnd()&lt;/a>。此功能以前是通过非标准 &lt;code>trimLeft()&lt;/code> 和 &lt;code>trimRight()&lt;/code> 方法提供的，这些方法仍然是新方法的别名，用于向后兼容。&lt;/p>&lt;pre class="prettyprint language-js">&lt;code>const string = &amp;#x27;  hello world  &amp;#x27;;string.trimStart();&amp;#x2F;&amp;#x2F; → &amp;#x27;hello world  &amp;#x27;string.trimEnd();&amp;#x2F;&amp;#x2F; → &amp;#x27;  hello world&amp;#x27;string.trim();&amp;#x2F;&amp;#x2F; → &amp;#x27;hello world&amp;#x27;&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://tc39.github.io/ecma262/#sec-array.prototype.values">Array.prototype.values()&lt;/a> 方法返回了数组的迭代接口，就像 ES2015 的 &lt;code>Map&lt;/code> 和 &lt;code>Set&lt;/code> 一样：现在我们可以使用 &lt;code>keys&lt;/code>、&lt;code>values&lt;/code>、&lt;code>entries&lt;/code> 进行遍历。此更改有可能与现有的 JavaScript 代码不兼容。如果您发现某个网站有奇怪的行为或代码运行中断了，请尝试通过 &lt;code>chrome://flags/#enable-array-prototype-values&lt;/code> 禁用此功能，并&lt;a href="https://bugs.chromium.org/p/v8/issues/entry?template=Defect+report+from+user">提出问题&lt;/a>。&lt;/p>&lt;h2>缓存执行过的代码&lt;/h2>&lt;p>“冷加载（cold load）”和“温加载（warm load）”这两个术语在关于加载性能方面是众所周知的。在 V8 中，还有热加载（hot load）的概念。我们以 Chrome 为例说明加载的不同级别：&lt;/p>&lt;ul>&lt;li>&lt;p>&lt;strong>冷加载（cold load）&lt;/strong>：Chrome 首次看到访问的网页，并且根本没有任何数据缓存。&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;strong>温加载（warm load）&lt;/strong>：Chrome 会记住网页已被访问，并且可以从缓存中检索某些资源（例如图像和脚本源文件）。V8 意识到页面使用了相同的脚本文件，因此将编译后的代码与脚本文件一起缓存在磁盘缓存中。&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;strong>热加载（hot load）&lt;/strong>：Chrome 第三次访问网页时，从磁盘缓存载入脚本文件时，它还向 V8 提供上次加载期间缓存的代码。V8 可以使用这个缓存代码来避免必须从头开始解析和编译脚本。&lt;/p>&lt;/li>&lt;/ul>&lt;p>在 V8 v6.6 之前，我们在顶层编译后立即缓存生成的代码。V8 只编译已知在顶层编译过程中立即执行的函数，并将其他函数标记为延迟编译。这意味着缓存代码只包含顶级代码，而所有其他函数必须在每次页面加载时从头开始进行延迟编译。从版本 6.6 开始，V8 会缓存顶级代码执行之后的脚本生成的代码。在我们执行脚本时，更多的函数会被编译并且可以被包含在缓存中。因此，这些函数不需要在未来页面加载时编译，从而将热加载（hot load）场景中的编译和解析时间缩短 20-60%。对最终用户可见的是，提供了一个不太拥挤的主线程，因此会更顺畅，而且有更快的加载体验。&lt;/p>&lt;p>之后我们会编写此主题相关的详细博客文章。（已经发布并翻译：&lt;a href="https://zhuanlan.zhihu.com/p/36183010">V8 6.6 进一步改进缓存性能&lt;/a>）&lt;/p>&lt;h2>后台编译&lt;/h2>&lt;p>一段时间以来，V8 已经能够&lt;a href="https://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html">在后台线程上解析 JavaScript 代码&lt;/a>。随着去年发布的 V8 新的 &lt;a href="https://v8project.blogspot.com/2017/05/launching-ignition-and-turbofan.html">Ignition 字节码解释器&lt;/a>，我们扩展了这个功能，以便在后台线程上将 JavaScript 源代码编译为字节码。这使得嵌入 V8 引擎的软件可以在主线程中执行更多工作，来执行更多的 JavaScript 脚本。我们在 Chrome 66 中启用了此功能，在通常的网站上，主线程编译时间减少了 5% 到 20%。有关更多详细信息，请参阅[此功能的最新博客文章(&lt;a href="https://v8project.blogspot.com/2018/03/background-compilation.html">https://v8project.blogspot.com/2018/03/background-compilation.html&lt;/a>)。&lt;/p>&lt;h2>移除 AST 编码&lt;/h2>&lt;p>去年 &lt;a href="https://v8project.blogspot.com/2017/05/launching-ignition-and-turbofan.html">Ignition 和 TurboFan 推出&lt;/a>后，我们继续从简化编译流水线（pipeline）中获益。以前在代码解析(parsing)后还需要一个名为 “AST Numbering（AST编码）” 的阶段，用来对生成的抽象语法树中的节点进行编号，之后编译器使用此节点时可以有共同的引用点。&lt;/p>&lt;p>随着时间的推移，这个后处理过程(post-processing)已经扩展到包含其他功能：为生成器和异步函数的暂停点进行编号，收集需要迫切编译的内部函数，初始化文字字面量或检测不可优化的代码模式。&lt;/p>&lt;p>通过新的流水线(pipeline)，Ignition 字节码成为常用的引用点，并且不再需要编号 - 但是，仍然需要其它的功能，并且仍然保留了 AST 编号。&lt;/p>&lt;p>在 V8 v6.6 中，我们终于&lt;a href="https://bugs.chromium.org/p/v8/issues/detail?id=7178">设法移除了其余的功能或将其移动到了其他地方&lt;/a>，这些工作在解析过程中完成，从而避免了对 AST 的遍历。这导致实际编译时间提高了 3-5%。&lt;/p>&lt;h2>异步性能改进&lt;/h2>&lt;p>我们为 Promise 和异步函数取得了一些不错的性能改进，特别是设法缩小了异步函数和 promise 链之间的差距。&lt;/p>&lt;p>&lt;img src="//dn-cnode.qbox.me/Fj6Tr5qQtPbX_MMve4kjtZ8CuBgO" alt="image.png">&lt;/p>&lt;p>此外，异步生成器和异步迭代的性能也得到显着提高，在即将发布的 Node 10 LTS 版中会包含 V8 v6.6。&lt;/p>&lt;p>作为一个例子，考虑下面的斐波那契序列：&lt;/p>&lt;pre class="prettyprint language-js">&lt;code>async function* fibonacciSequence() {  for (let a = 0, b = 1;;) {    yield a;    const c = a + b;    a = b;    b = c;  }}async function fibonacci(id, n) {  for await (const value of fibonacciSequence()) {    if (n-- === 0) return value;  }}&lt;/code>&lt;/pre>&lt;p>我们已经测量了这种模式在 Babel transpilation 之前和之后的改进：&lt;/p>&lt;p>&lt;img src="//dn-cnode.qbox.me/FiPbifpOfXgJ3DgJ_GXS1oI4ZxBD" alt="image.png">&lt;/p>&lt;p>最后，&lt;a href="https://chromium-review.googlesource.com/c/v8/v8/+/866734">字节码改进&lt;/a>也提高了这些“可暂停”函数的运行时性能：生成器，异步函数和模块，并减少了它们的编译大小。我们计划在即将发布的版本中进一步改进异步函数和异步生成器的性能，敬请关注。&lt;/p>&lt;h2>数组性能改进&lt;/h2>&lt;p>&lt;code>Array#reduce&lt;/code> 对于 holey double arrays 吞吐量性能提高了 10 倍以上（请参阅我们的&lt;a href="https://v8project.blogspot.com/2017/09/elements-kinds-in-v8.html">博客文章，了解 “holey 数组”和 “packed 数组”是什么&lt;/a>）。&lt;/p>&lt;p>&lt;img src="//dn-cnode.qbox.me/FkczPv1gVnE48nts5aorGRDAdt6j" alt="image.png">&lt;/p>&lt;h2>不受信任的代码保护&lt;/h2>&lt;p>在 V8 v6.6 中，我们针对旁路信道漏洞采取了更多缓解措施，以防止信息泄露给不可信的 JavaScript 和 WebAssembly 代码。&lt;/p>&lt;h2>不再需要 GYP&lt;/h2>&lt;p>这是第一个没有 GYP 文件的 V8 正式版本。如果您的产品需要 GYP 文件，则需要自行将它们复制到您自己的源代码库中。&lt;/p>&lt;h2>内存分析&lt;/h2>&lt;p>Chrome 的 DevTools 现在可以跟踪和快照 C++ DOM 对象，并显示 JavaScript 引用的所有可访问的 DOM 对象。这个特性是 V8 垃圾收集器的新 C++ 跟踪机制的好处之一。欲了解更多信息，请查看专门的博客文章：&lt;a href="https://zhuanlan.zhihu.com/p/34272169">Chrome 66 使用 DevTools 跟踪 JS 对象和 DOM 对象的引用&lt;/a>。&lt;/p>&lt;h2>V8 API&lt;/h2>&lt;p>请使用 &lt;code>git log branch-heads/6.5..branch-heads/6.6 include/v8.h&lt;/code> 获取 API 的变更列表。&lt;/p>&lt;p>对于&lt;a href="https://github.com/v8/v8/wiki/Using%20Git">使用 git 的 V8 开发者&lt;/a>，可以通过 &lt;code>git checkout -b 6.6 -t branch-heads/6.6&lt;/code> 签出 V8 v6.6 中的新功能进行试验。或者，您可以&lt;a href="https://www.google.com/chrome/browser/beta.html">订阅 Chrome 的 Beta 频道&lt;/a>，这样可以尽快尝试新功能。&lt;/p>&lt;/div></description>
<author>justjavac</author>
<pubDate>Fri, 27 Apr 2018 05:21:50 GMT</pubDate>
</item>
</channel>
</rss>